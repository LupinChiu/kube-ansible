---
# - name: Disable services if enabled
#   shell: if systemctl is-enabled --quiet {{ item }}; then systemctl disable {{ item }} && echo disable_ok ; fi
#   register: output
#   changed_when: "'disable_ok' in output.stdout"
#   with_items:
#     - firewalld
#     - iptables
- name: ------- Disable firewalld -------
  systemd:
    name: "{{ item }}"
    daemon_reload: yes
    state: stopped
    enabled: no
  with_items:
    - "firewalld"
    - "iptables"
  ignore_errors: True
  register: disable_firewalld

- name: Install chrony, sync time
  ansible.builtin.package:
    name: chrony
    state: present

- when: container_runtime == 'nvidia-docker'
  raw: "nvidia-smi"
  ignore_errors: True
  register: check_driver

- when: container_runtime != 'crio'
  include_tasks: containerd/main.yml

# nvidia-docker runtime
- when:
  - container_runtime == 'nvidia-docker'
  - "'not found' not in check_driver.stdout"
  include_tasks: nvidia-docker/main.yml

# docker runtime
- when: container_runtime == 'docker' or container_runtime == 'nvidia-docker'
  include_tasks: docker/main.yml

# cri-o runtime
- when: container_runtime == 'crio'
  include_tasks: crio/main.yml

- name: Check sysctl k8s file
  stat: path=/etc/sysctl.d/99-k8s.conf
  register: check_sysctl_conf

- name: Write bridge-netfilter and ip-forward system variables
  when: not check_sysctl_conf.stat.exists
  copy:
    content: |
      net.ipv4.ip_forward=1
      net.bridge.bridge-nf-call-ip6tables=1
      net.bridge.bridge-nf-call-iptables=1
      net.ipv4.conf.all.arp_ignore=1
      net.ipv4.conf.all.arp_announce=2
    dest: /etc/sysctl.d/99-k8s.conf
  register: copy_sysctl

- name: Add the overlay module
  community.general.modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Enable bridge-netfilter and ip-forward system variables
  when: copy_sysctl
  command: "sysctl -p /etc/sysctl.d/99-k8s.conf"
